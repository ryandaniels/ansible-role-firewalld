---
# - name: show setup
#   setup:
#     gather_subset:
#       - 'all'
#   register: stat_setup

# - name: debug stat_setup
#   debug: var=stat_setup
#   when:
#     # - ansible_os_family == "RedHat"
#     # - ansible_distribution_major_version == '7'
#     - firewalld_managed|bool
#     # - debug_enabled_default|bool
#   tags:
#     - firewalld

- block:
  # - name: debug groups
  #   debug: var=groups
  - name: debug firewalld_zone_source
    debug: var=firewalld_zone_source
  - name: debug firewalld_custom_service
    debug: var=firewalld_custom_service
  # - name: pause
  #   pause:
  #     seconds: 30
  when:
    # - ansible_os_family == "RedHat"
    # - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    # - debug_enabled_default|bool
    - firewalld_show_config|bool
  tags:
    - firewalld
    - firewalld_show_config

- name: Ensure required packages are installed (yum)
  package:
    name: "{{ firewalld_packages|default([]) }}"
    update_cache: yes
    state: installed
  environment: "{{ proxy_env }}"
  when:
    # - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - firewalld_managed_pkg|bool
  tags:
    - firewalld
    - firewalld_pkg_install

- name: firewalld | check version
  command: firewall-offline-cmd -V warn=false
  register: stat_service_firewalld_version
  failed_when: false
  ignore_errors: true
  changed_when: false
  # no_log: True
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    # - debug_enabled_default|bool
  tags:
    - firewalld

- name: debug stat_service_firewalld_version
  debug: var=stat_service_firewalld_version.stdout_lines
  when:
    # - ansible_os_family == "RedHat"
    # - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    # - debug_enabled_default|bool
  tags:
    - firewalld

- name: firewalld | check if running
  command: systemctl status firewalld warn=false
  register: stat_service_firewalld_status
  failed_when: false
  ignore_errors: true
  changed_when: false
  no_log: True
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
  tags:
    - firewalld

- name: debug stat_service_firewalld_status
  debug: var=stat_service_firewalld_status.stdout_lines
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - debug_enabled_default|bool
  tags:
    - firewalld

- name: firewalld | Config zone source IP
  firewalld:
    zone: "{{ item.0.zone }}"
    source: "{{ item.1 }}"
    state: "{{ item.0.state|default('enabled') }}"
    permanent: yes
    offline: yes
  notify: Reload firewalld
  with_subelements:
    - "{{ firewalld_zone_source|default({}) }}"
    - source
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
  # loop_control:
  #   label: "Zone: {{ item.0.zone }} Source: {{ item.1 }}"
  tags:
    - firewalld

#get active services
#when item not in service list, firewalld reload is needed to see item in service list so can add to zone
- name: firewalld | Get active services to determine if reload needed
  command: firewall-offline-cmd --get-services warn=false
  register: stat_service_firewalld_services
  failed_when: false
  ignore_errors: true
  changed_when: false
  no_log: true
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
  tags:
    - firewalld

- name: debug stat_service_firewalld_services.stdout.split()
  debug: var=stat_service_firewalld_services.stdout.split()
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - debug_enabled_default|bool
    - stat_service_firewalld_status.rc == 0
  tags:
    - firewalld

#Built-in services will fail to be removed fully. But they are removed from the zone below (Add/Remove service in zone)
#Use this instead? firewall-offline-cmd --zone=public --remove-service-from-zone=zabbix-agent
#But then custom services aren't fully deleted..
- name: firewalld | Remove custom service
  command: "firewall-offline-cmd --delete-service={{ item.name }}"
  ignore_errors: true
  notify: Reload firewalld
  with_items:
    - "{{ firewalld_custom_service|default({}) }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - item.state == 'disabled'
    - 'item.name in stat_service_firewalld_services.stdout.split()'
  loop_control:
    label: "Removed service name: {{ item.name }}"
  tags:
    - firewalld
    - firewalld_remove_service

#If only block can use loops..
# - block:
- name: firewalld | Create custom service name
  command: "firewall-offline-cmd --new-service={{ item.name }}"
          # firewall-offline-cmd --service={{ item.name }} --set-short={{ item.name }} && \
          # firewall-offline-cmd --service={{ item.name }} --set-description='{{ item.description }}' && \
          # firewall-offline-cmd --service={{ item.name }} --add-port={{ item.port_protocol }} && \
          # firewall-offline-cmd --zone={{ item.zone }} --add-service={{ item.name }}"
  with_items:
    - "{{ firewalld_custom_service|default({}) }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - item.state == 'enabled'
    - 'item.name not in stat_service_firewalld_services.stdout.split()'
  loop_control:
    label: "Created service name: {{ item.name }}"
  tags:
    - firewalld
    - firewalld_create_service

- name: firewalld | Get custom service set-short
  command: "firewall-offline-cmd --service={{ item.name }} --get-short"
  register: stat_firewalld_service_get_short
  failed_when: false
  ignore_errors: true
  changed_when: false
  # no_log: true
  with_items: "{{ firewalld_custom_service|default({}) }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    # - stat_service_firewalld_status.rc == 0
  loop_control:
    label: "{{ item.name }} - found short name: {{ stat_firewalld_service_get_short.stdout|d() }}"
  tags:
    - firewalld

# - name: debug stat_firewalld_service_get_short
#   debug: var=stat_firewalld_service_get_short
#   # with_items: "{{ stat_firewalld_service_get_short.results }}"
#   when:
#     - debug_enabled_default|bool
#     - firewalld_managed|bool
#     # - stat_service_firewalld_status.rc == 0
#   tags:
#     - firewalld

- name: firewalld | Set custom service set-short
  command: "firewall-offline-cmd --service={{ item.item.name }} --set-short={{ item.item.name }}"
  with_items:
    # - "{{ firewalld_custom_service|default({}) }}"
    - "{{ stat_firewalld_service_get_short.results }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - item.item.state == 'enabled'
    - 'item.stdout != item.item.name'
  loop_control:
    label: "{{ item.item.name }} - set short name: {{ item.item.name }}"
  tags:
    - firewalld
    - firewalld_create_service

- name: firewalld | Get custom service description
  command: "firewall-offline-cmd --service={{ item.name }} --get-description"
  register: stat_firewalld_service_get_description
  failed_when: false
  ignore_errors: true
  changed_when: false
  with_items: "{{ firewalld_custom_service|default({}) }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
  loop_control:
    label: "{{ item.name }} - found description: {{ stat_firewalld_service_get_description.stdout|d() }}"
  tags:
    - firewalld

# - name: debug stat_firewalld_service_get_description
#   debug: var=stat_firewalld_service_get_description
#   # with_items: "{{ stat_firewalld_service_get_description.results }}"
#   when:
#     - debug_enabled_default|bool
#     - firewalld_managed|bool
#     # - stat_service_firewalld_status.rc == 0
#   tags:
#     - firewalld

- name: firewalld | Set custom service description
  command: "firewall-offline-cmd --service={{ item.item.name }} --set-description='{{ item.item.description }}'"
  with_items:
    - "{{ stat_firewalld_service_get_description.results }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - item.item.state == 'enabled'
    - item.item.description is defined
    - item.stdout != item.item.description
  loop_control:
    label: "{{ item.item.name }} - set description: {{ item.item.description|default({}) }}"
  tags:
    - firewalld
    - firewalld_create_service

#DONE: how to 'change' a port that's defined?? Can only 'disable' entire service.
#      Can add new ports. But not remove existing.
#firewall-offline-cmd --service=zabbix-agent --get-ports
#Remove ports in output of above command that aren't in variable provided. 
#Can't because built-in services I don't have ports for! Means all ports need to be defined!
#DONE: add strict mode so this can be disabled (by default?). Not needed. Just dont remove ports if port_protocol is undefined.
#TODO: Seems like round-about way to do this. Shorten somehow?

#Remove if port is not defined in vars
- name: firewalld | Get custom service ports in firewalld
  command: "firewall-offline-cmd --service={{ item.name }} --get-ports"
  register: stat_firewalld_service_get_service_port_list
  failed_when: false
  # ignore_errors: true
  changed_when: false
  with_items:
    - "{{ firewalld_custom_service|default({}) }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    # - item.state == 'enabled'
  loop_control:
    label: "{{ item.name }} - found ports: {{ stat_firewalld_service_get_service_port_list.stdout|d() }}"
  tags:
    - firewalld

# - name: debug stat_firewalld_service_get_service_port_list
#   debug: var=stat_firewalld_service_get_service_port_list
#   when:
#     - debug_enabled_default|bool
#     - firewalld_managed|bool
#   tags:
#     - firewalld

# - name: firewalld | debug stat_firewalld_service_get_service_port_list.results
#   debug: msg="{{ item.item.name }}, {{ item.stdout }}" #, item.rc={{ item.rc }}, item.item_debug={{ item.item|type_debug }}"
#   with_items: "{{ stat_firewalld_service_get_service_port_list.results }}"
#   when:
#     - ansible_os_family == "RedHat"
#     - ansible_distribution_major_version == '7'
#     - firewalld_managed|bool
#     - debug_enabled_default|bool
#   loop_control:
#     label: ""
#   tags:
#     - firewalld

- name: firewalld | Set variable firewalld_service_port_list
  set_fact:
    firewalld_service_port_list: "{{ firewalld_service_port_list|default([]) + [{'name': item.item.name , 'port_protocol': item.item.port_protocol , 'port_stdout': item.stdout.split(' ')} ] }}" # noqa 204
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - item.item.port_protocol is defined #prevents removing ports of built-in firewalld services (if port_protocol is empty)
    # - item.rc != 0
  loop: "{{ stat_firewalld_service_get_service_port_list.results|flatten(levels=1) }}"
  loop_control:
    label: ""
  tags:
    - firewalld

# - name: firewalld | show variable firewalld_service_port_list
#   debug: var=firewalld_service_port_list
#   when: debug_enabled_default|bool and firewalld_service_port_list is defined

- name: firewalld | debug firewalld_service_port_list
  debug: msg="{{ item.name }}, {{ item.port_protocol }}, {{ item.port_stdout }}" #, item.rc={{ item.rc }}, item.item_debug={{ item.item|type_debug }}"
  with_items: "{{ firewalld_service_port_list }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - debug_enabled_default|bool
  loop_control:
    label: ""
  tags:
    - firewalld

- name: firewalld | Remove custom service ports not specified
  command: "firewall-offline-cmd --service={{ item.0.name }} --remove-port='{{ item.1 }}'"
  notify: Reload firewalld
  with_subelements:
    - "{{ firewalld_service_port_list }}"
    - port_stdout
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    # - item.item.state == 'enabled'
    - item.1 is defined
    - item.1|length > 0
    - item.1 not in item.0.port_protocol
  loop_control:
    label: "{{ item.0.name }} - removed port: {{ item.1|default({}) }}"
  tags:
    - firewalld
    - firewalld_create_service

# - name: pause
#   pause:
#     seconds: 30
#   when: debug_enabled_default|bool and firewalld_managed|bool
#   tags:
#     - firewalld

#firewall-offline-cmd --service=app123-internal --query-port=2181/tcp
- name: firewalld | Get custom service ports to add
  command: "firewall-offline-cmd --service={{ item.0.name }} --query-port={{ item.1 }}"
  register: stat_firewalld_service_get_service_port_add
  failed_when: false
  # ignore_errors: true
  changed_when: false
  with_subelements:
    - "{{ firewalld_custom_service|default({}) }}"
    - port_protocol
    - skip_missing: True
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - item.0.state == 'enabled'
    - item is defined
    - item.1 is defined
  loop_control:
    label: "{{ item.0.name }} - found: {{ 'True' if not stat_firewalld_service_get_service_port_add.rc|d(false)|bool else 'False' }}"
  tags:
    - firewalld

# - name: firewalld | debug stat_firewalld_service_get_service_port_add
#   debug: var=stat_firewalld_service_get_service_port_add
#   when:
# #    - ansible_os_family == "RedHat"
# #    - ansible_distribution_major_version == '7'
#     - firewalld_managed|bool
#     - debug_enabled_default|bool
#   tags:
#     - firewalld

- name: firewalld | debug stat_firewalld_service_get_service_port_add_add.results|last
  debug: msg="{{ item.item | last }}" #, item.rc={{ item.rc }}, item.item_debug={{ item.item|type_debug }}"
  with_items: "{{ stat_firewalld_service_get_service_port_add.results }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - debug_enabled_default|bool
  loop_control:
    label: ""
  tags:
    - firewalld

# - name: firewalld | debug stat_firewalld_service_get_service_port_add type_debug
#   debug: msg="item.item={{ item.item | last | type_debug }}"
#   when: debug_enabled_default|bool
#   loop: "{{ stat_firewalld_service_get_service_port_add.results|flatten(levels=1) }}"
#   loop_control:
#     label: ""

#Don't need to use set_fact to create new var? just use stat_firewalld_service_get_service_port_add.results with the magic of map etc
# - name: firewalld | Set variable firewalld_add_name_port
#   set_fact:
#     # test123: "{{ test123|default([]) }} name: {{ item.item|map(attribute='name')|list|select('defined')|list }} + {{ item.item|last }}"
#     # test123: "{{ test123|default([]) + [{'name': item.item|map(attribute='name')|list|select('defined')|list|join(', ') }] }}"
#     firewalld_add_name_port: "{{ firewalld_add_name_port|default([]) + [{'name': item.item|map(attribute='name')|list|select('defined')|list|join(', ') , 'port': item.item|last} ] }}"
#   when:
#     - ansible_os_family == "RedHat"
#     - ansible_distribution_major_version == '7'
#     - firewalld_managed|bool
#     - item.rc != 0
#   loop: "{{ stat_firewalld_service_get_service_port_add.results|flatten(levels=1) }}"
#   loop_control:
#     label: ""
#   tags:
#     - firewalld

# - name: firewalld | show variable firewalld_add_name_port
#   debug: var=firewalld_add_name_port
#   when: debug_enabled_default|bool and firewalld_add_name_port is defined

# - name: firewalld | show variable firewalld_add_name_port items
#   debug: msg="name={{ item.name }}, port={{ item.port }}"
#   when: debug_enabled_default|bool and item is defined
#   loop: "{{ firewalld_add_name_port|flatten(levels=1) }}"
#   loop_control:
#     label: ""

# - name: firewalld | Set port for service
#   command: "firewall-offline-cmd --service={{ item.name }} --add-port={{ item.port }}"
#   # with_subelements:
#   #   - "{{ firewalld_custom_service|default({}) }}"
#   #   - port_protocol
#   with_items:
#     # - "{{ firewalld_custom_service|default({}) }}"
#     - "{{ firewalld_add_name_port }}"
#   when:
#     - ansible_os_family == "RedHat"
#     - ansible_distribution_major_version == '7'
#     - firewalld_managed|bool
#     - item is defined
#     # - item.state == 'enabled'
#     # - item.rc != 0
#     # - '" " ~ item.1 ~ " " not in stat_service_firewalld_services.stdout'
#   loop_control:
#     label: "{{ item.name }} - added port: {{ item.port }}"
#   tags:
#     - firewalld
#     - firewalld_create_service

#Don't need to use set_fact to create new var. just use stat_firewalld_service_get_service_port_add.results with the magic of map etc
- name: firewalld | Add port for custom service
  command: "firewall-offline-cmd --service={{ item.item|map(attribute='name')|list|select('defined')|list|join(', ') }} --add-port={{ item.item|last }}"
  notify: Reload firewalld
  with_items:
    - "{{ stat_firewalld_service_get_service_port_add.results }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - item.rc is defined
    # - item is not skipped
    - item.rc != 0
  loop_control:
    label: "{{ item.item|map(attribute='name')|list|select('defined')|list|join(', ') }} - added port: {{ item.item|last }}"
  tags:
    - firewalld
    - firewalld_create_service

# - name: debug stat_service_firewalld_services
#   debug: var=stat_service_firewalld_services.stdout
#   when:
# #    - ansible_os_family == "RedHat"
# #    - ansible_distribution_major_version == '7'
#     - firewalld_managed|bool
#     - debug_enabled_default|bool
#     - stat_service_firewalld_status.rc == 0
#   tags:
#     - firewalld

- name: set fact firewalld reload needed
  set_fact:
    firewalld_reload_hint_result: true
  with_items: "{{ firewalld_custom_service }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - stat_service_firewalld_status.rc == 0
    # - stat_service_firewalld_services is failed
    - item.state == 'enabled'
    - 'item.name not in stat_service_firewalld_services.stdout.split()'
  loop_control:
    label: "{{ item.name }} not in firewalld service list"
  tags:
    - firewalld

- name: debug firewalld_reload_hint_result
  debug: var=firewalld_reload_hint_result
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - debug_enabled_default|bool
    - stat_service_firewalld_status.rc == 0
  tags:
    - firewalld

#Reload firewall now (if running) so service is visible for next task
#Don't reload if doing remove/re-add right away. not needed since service is visible
#reload here causes outage if firewalld running and app123 is in service! Don't reload yet if exists..
- name: firewalld | reload firewalld
  #command: firewall-cmd --reload
  systemd:
    name: firewalld
    state: reloaded
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - stat_service_firewalld_status.rc == 0
    - firewalld_reload_hint_result|bool
  tags:
    - firewalld
    - skip_ansible_lint

- name: firewalld | Add/Remove service in zone
  # command: 'firewall-offline-cmd --zone=internal --add-service=app123-internal'
  firewalld:
    service: "{{ item.name }}"
    zone: "{{ item.zone }}"
    state: "{{ item.state }}"
    offline: yes
    permanent: yes
  notify: Reload firewalld
  with_items: "{{ firewalld_custom_service|default({}) }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
  loop_control:
    # label: "{{ item.name }} - found=0, not found=1: {{ stat_firewalld_service_get_service_zone.rc }}"
    label: "{{ item.name }} - {{ item.state }} in zone {{ item.zone }}"
  tags:
    - firewalld
#End - add service to zone

#Remove default firewalld services that are not needed from public zone
- name: firewalld | Remove default firewalld services from public zone
  firewalld:
    service: "{{ item }}"
    zone: public
    state: disabled
    offline: yes
    permanent: yes
  notify: Reload firewalld
  with_items: "{{ firewalld_public_remove_default }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - firewalld_public_remove_default is defined
  tags:
    - firewalld
    - firewalld_remove_default

#Remove default firewalld services that are not needed from internal zone
- name: firewalld | Remove default firewalld services from internal zone
  firewalld:
    service: "{{ item }}"
    zone: internal
    state: disabled
    offline: yes
    permanent: yes
  notify: Reload firewalld
  with_items: "{{ firewalld_internal_remove_default }}"
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - firewalld_internal_remove_default is defined
  tags:
    - firewalld
    - firewalld_remove_default

- name: firewalld | Start the firewalld service
  systemd:
    name: firewalld
    state: started
    enabled: yes
  register: stat_service_firewalld_start
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - firewalld_start|bool
  tags:
    - firewalld
    - firewalld_start

- name: pause to wait in case firewalld service fails to start
  pause:
    seconds: 10
  when:
    - firewalld_managed|bool
    - firewalld_start|bool
    - stat_service_firewalld_start.changed
  tags:
    - firewalld
    - firewalld_start

- name: firewalld | check if running
  command: systemctl status firewalld warn=false
  register: stat_service_firewalld_status_end
  failed_when: not stat_service_firewalld_status_end.rc == 0
  # ignore_errors: true
  changed_when: false
  # no_log: True
  when:
#    - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - firewalld_start|bool
    - stat_service_firewalld_start.changed
  tags:
    - firewalld
    - firewalld_start

- name: debug stat_service_firewalld_status_end
  debug: var=stat_service_firewalld_status_end.stdout_lines
  when:
    # - ansible_os_family == "RedHat"
    # - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - firewalld_start|bool
    - stat_service_firewalld_start.changed
    - debug_enabled_default|bool
  tags:
    - firewalld
    - firewalld_start

#Fedora <30 claims firewalld is running but ip6tables is not working.
#Force a reload check to be safe.
- name: firewalld | Check firewalld can reload
  command: firewall-cmd --reload
  changed_when: false
  when:
    # - ansible_os_family == "RedHat"
    # - ansible_distribution_major_version == '7'
    - firewalld_managed|bool
    - (firewalld_start|bool or stat_service_firewalld_status.rc == 0)
